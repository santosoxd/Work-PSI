import tkinter as tk
from tkinter import messagebox, simpledialog
from collections import Counter


# Classe filme
class Filme:
    def __init__(self, titulo, duracao, classificacao):
        self.titulo = titulo
        self.duracao = duracao
        self.classificacao = classificacao

# Classe sess√£o de cinema
class Sessao:
    def __init__(self, filme, horario, assentos_disponiveis):
        self.filme = filme
        self.horario = horario
        self.assentos_disponiveis = assentos_disponiveis

# Classe cliente
class Cliente:
    def __init__(self, nome, nif):
        self.nome = nome
        self.nif = nif
        self.ingressos_comprados = []  #Lista de ingressos comprados

# Classe principal que representa o cinema
class Cinema:
    def __init__(self):
        self.sessoes = []  #Lista de sess√µes
        self.clientes = []  # Lista de clientes

    # Adiciona uma nova sess√£o
    def adicionar_sessao(self, sessao):
        self.sessoes.append(sessao)

    # Retorna a lista de sess√µes
    def listar_sessoes(self):
        return self.sessoes

    # Remove uma sess√£o por √≠ndice
    def remover_sessao(self, indice):
        if 0 <= indice < len(self.sessoes):
            del self.sessoes[indice]
            return True
        return False

    # Compra de ingresso para uma sess√£o espec√≠fica
    def comprar_ingresso(self, nome_cliente, nif, indice_sessao, quantidade):
        if not (0 <= indice_sessao < len(self.sessoes)):
            return False

        sessao = self.sessoes[indice_sessao]

        # Verifica se h√° lugares suficientes
        if sessao.assentos_disponiveis < quantidade:
            return False

        # Verifica se o cliente j√° existe
        cliente = next((c for c in self.clientes if c.nif == nif), None)
        if not cliente:
            cliente = Cliente(nome_cliente, nif)
            self.clientes.append(cliente)

        #Atualiza o n√∫mero de lugares dispon√≠veis e adiciona ingressos ao cliente
        sessao.assentos_disponiveis -= quantidade
        for _ in range(quantidade):
            cliente.ingressos_comprados.append(f"{sessao.filme.titulo} √†s {sessao.horario}")
        return True

    #Retorna os bilhetes de um cliente com base no NIF
    def bilhetes_cliente(self, nif):
        cliente = next((c for c in self.clientes if c.nif == nif), None)
        return cliente.ingressos_comprados if cliente else []

# Classe da interface gr√°fica
class AppCinema:
    def __init__(self, master):
        self.cinema = Cinema()
        self.master = master

        master.title("Sistema de Venda de Ingressos - Cinema Local ")

        #bot√µes
        tk.Button(master, text="Adicionar Filme e Sess√£o", command=self.adicionar_sessao, width=25, height=2, bg="#C0C0C0").pack(pady=5)
        tk.Button(master, text="Listar Sess√µes Dispon√≠veis", command=self.listar_sessoes, width=25, height=2, bg="#C0C0C0").pack(pady=5)
        tk.Button(master, text="Remover Sess√£o", command=self.remover_sessao, width=25, height=2, bg="#C0C0C0").pack(pady=5)
        tk.Button(master, text="Comprar Ingresso", command=self.comprar_ingresso, width=25, height=2, bg="#C0C0C0").pack(pady=5)
        tk.Button(master, text="Ver Bilhetes de Cliente", command=self.ver_bilhetes_cliente, width=25, height=2, bg="#C0C0C0").pack(pady=5)

    #Fun√ß√£o para adicionar sess√£o
    def adicionar_sessao(self):
        try:
           
            titulo = simpledialog.askstring("Filme", "T√≠tulo do Filme:")
            if not titulo:
                raise ValueError("T√≠tulo n√£o pode ser vazio.")

            duracao = simpledialog.askinteger("Filme", "Dura√ß√£o (minutos):")
            if duracao is None or duracao <= 0:
                raise ValueError("Dura√ß√£o inv√°lida.")

            classificacao = simpledialog.askstring("Filme", "Classifica√ß√£o (ex: M/12):")
            if not classificacao:
                raise ValueError("Classifica√ß√£o n√£o pode ser vazia.")

            filme = Filme(titulo, duracao, classificacao)

            # Permite adicionar varias sess√µes para o mesmo filme
            while True:
                horario = simpledialog.askstring("Sess√£o", "Hor√°rio da Sess√£o (ex: 21:00):")
                if not horario:
                    raise ValueError("Hor√°rio n√£o pode ser vazio.")

                assentos = simpledialog.askinteger("Sess√£o", "N√∫mero de Assentos Dispon√≠veis:")
                if assentos is None or assentos <= 0:
                    raise ValueError("N√∫mero de assentos inv√°lido.")

                sessao = Sessao(filme, horario, assentos)
                self.cinema.adicionar_sessao(sessao)

                
                continuar = messagebox.askyesno("Adicionar mais sess√µes?", "Deseja adicionar outra sess√£o para esse filme?")
                if not continuar:
                    break

            messagebox.showinfo("Sucesso", "Sess√£o(√µes) adicionada(s) com sucesso.")
        except ValueError as e:
            messagebox.showerror("Erro", str(e))

    # Mostra as sess√µes dispon√≠veis
    def listar_sessoes(self):
        sessoes = self.cinema.listar_sessoes()
        if not sessoes:
            messagebox.showinfo("Sess√µes", "N√£o h√° sess√µes dispon√≠veis.")
        else:
            texto = "\n".join([
                f"{i}. üé¨ T√≠tulo: {s.filme.titulo}\n   ‚è±Ô∏è Dura√ß√£o: {s.filme.duracao} min\n   üé´ Classifica√ß√£o: {s.filme.classificacao}\n   ‚è∞ Hor√°rio: {s.horario}\n   ü™ë Assentos dispon√≠veis: {s.assentos_disponiveis}"
                for i, s in enumerate(sessoes)
            ])
            messagebox.showinfo("Sess√µes Dispon√≠veis", texto)

    # Remove uma sess√£o com base no √≠ndice informado
    def remover_sessao(self):
        sessoes = self.cinema.listar_sessoes()
        if not sessoes:
            messagebox.showinfo("Sess√µes", "N√£o h√° sess√µes dispon√≠veis para remover.")
            return

        texto = "\n".join([
            f"{i}. üé¨ T√≠tulo: {s.filme.titulo}\n   ‚è±Ô∏è Dura√ß√£o: {s.filme.duracao} min\n   üé´ Classifica√ß√£o: {s.filme.classificacao}\n   ‚è∞ Hor√°rio: {s.horario}\n   ü™ë Assentos dispon√≠veis: {s.assentos_disponiveis}"
            for i, s in enumerate(sessoes)
        ])
        messagebox.showinfo("Sess√µes Cadastradas", texto)

        try:
            indice = simpledialog.askinteger("Remover Sess√£o", "N√∫mero da Sess√£o a remover:")
            if indice is None:
                return

            sucesso = self.cinema.remover_sessao(indice)
            if sucesso:
                messagebox.showinfo("Remo√ß√£o", "Sess√£o removida com sucesso.")
            else:
                raise ValueError("√çndice inv√°lido.")
        except ValueError as e:
            messagebox.showerror("Erro", str(e))

    #fun√ß√£o para realizar a compra de bilhetes
    def comprar_ingresso(self):
        try:
            nome = simpledialog.askstring("Cliente", "Nome do Cliente:")
            if not nome:
                raise ValueError("Nome √© obrigat√≥rio.")

            nif = simpledialog.askstring("Cliente", "NIF:")
            if not nif or not nif.isdigit() or len(nif) != 9:
                raise ValueError("NIF inv√°lido. Deve ter 9 d√≠gitos.")

            sessoes = self.cinema.listar_sessoes()
            if not sessoes:
                messagebox.showinfo("Sess√µes", "N√£o h√° sess√µes dispon√≠veis para compra.")
                return

            lista = "\n".join([
                f"{i}. üé¨ {s.filme.titulo} | ‚è∞ {s.horario} | ü™ë {s.assentos_disponiveis} lugares | üé´ {s.filme.classificacao}"
                for i, s in enumerate(sessoes)
            ])
            prompt = f"Escolha o n√∫mero da sess√£o para comprar ingresso:\n\n{lista}"
            indice = simpledialog.askinteger("Compra", prompt)
            if indice is None:
                return

            quantidade = simpledialog.askinteger("Compra", "Quantos bilhetes deseja comprar?")
            if quantidade is None or quantidade <= 0:
                raise ValueError("Quantidade inv√°lida.")

            sucesso = self.cinema.comprar_ingresso(nome, nif, indice, quantidade)
            if sucesso:
                messagebox.showinfo("Compra", f"{quantidade} ingresso(s) comprado(s) com sucesso.")
            else:
                raise ValueError("Compra falhou. Verifique o n√∫mero da sess√£o ou lugares dispon√≠veis.")
        except ValueError as e:
            messagebox.showerror("Erro", str(e))

    # mostra os bilhetes comprados por um cliente
    def ver_bilhetes_cliente(self):
        nif = simpledialog.askstring("Cliente", "Informe o NIF do Cliente:")
        if not nif:
            messagebox.showwarning("Aviso", "NIF √© obrigat√≥rio.")
            return

        bilhetes = self.cinema.bilhetes_cliente(nif)
        if bilhetes:
            # Conta quantas vezes cada bilhete aparece
            contagem = Counter(bilhetes)

            # Exibe 
            texto = "\n".join([f"{quantidade}x {descricao}" for descricao, quantidade in contagem.items()])
            messagebox.showinfo("Bilhetes do Cliente", f"Ingressos comprados:\n\n{texto}h")
        else:
            messagebox.showinfo("Bilhetes", "Nenhum bilhete encontrado para este NIF.")

# Inicializa a janela principal do programa
if __name__ == "__main__":
    root = tk.Tk()
    root.configure(bg="#722F37")  # Cor
    root.geometry("400x300")      # Tamanho
    app = AppCinema(root)         # Inicia
    root.mainloop()               # Loop principal do Tkinter
